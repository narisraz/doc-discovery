// Mocks generated by Mockito 5.4.4 from annotations
// in docdiscovery/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:algolia/algolia.dart' as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:docdiscovery/core/error/failure.dart' as _i6;
import 'package:docdiscovery/domain/entities/practitioner.dart' as _i7;
import 'package:docdiscovery/domain/repositories/practitioner_repository.dart'
    as _i4;
import 'package:docdiscovery/domain/usecases/get_practitioner_info_use_case.dart'
    as _i10;
import 'package:docdiscovery/domain/usecases/save_practitioner_use_case.dart'
    as _i9;
import 'package:docdiscovery/domain/usecases/search_practitioner_use_case.dart'
    as _i11;
import 'package:flutter/src/widgets/navigator.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAlgolia_1 extends _i1.SmartFake implements _i3.Algolia {
  _FakeAlgolia_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAlgoliaMultiIndexesReference_2 extends _i1.SmartFake
    implements _i3.AlgoliaMultiIndexesReference {
  _FakeAlgoliaMultiIndexesReference_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAlgoliaIndexReference_3 extends _i1.SmartFake
    implements _i3.AlgoliaIndexReference {
  _FakeAlgoliaIndexReference_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAlgoliaIndexesSnapshot_4 extends _i1.SmartFake
    implements _i3.AlgoliaIndexesSnapshot {
  _FakeAlgoliaIndexesSnapshot_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePractitionerRepository_5 extends _i1.SmartFake
    implements _i4.PractitionerRepository {
  _FakePractitionerRepository_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PractitionerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPractitionerRepository extends _i1.Mock
    implements _i4.PractitionerRepository {
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>> savePractitioner(
          _i7.PractitionerEntity? practitioner) =>
      (super.noSuchMethod(
        Invocation.method(
          #savePractitioner,
          [practitioner],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>>.value(
                _FakeEither_0<_i6.Failure, _i7.PractitionerEntity>(
          this,
          Invocation.method(
            #savePractitioner,
            [practitioner],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>>.value(
                _FakeEither_0<_i6.Failure, _i7.PractitionerEntity>(
          this,
          Invocation.method(
            #savePractitioner,
            [practitioner],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>> getById(
          String? practitionerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getById,
          [practitionerId],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>>.value(
                _FakeEither_0<_i6.Failure, _i7.PractitionerEntity>(
          this,
          Invocation.method(
            #getById,
            [practitionerId],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>>.value(
                _FakeEither_0<_i6.Failure, _i7.PractitionerEntity>(
          this,
          Invocation.method(
            #getById,
            [practitionerId],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>>);

  @override
  _i5.Future<List<_i7.PractitionerEntity>> search(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValue: _i5.Future<List<_i7.PractitionerEntity>>.value(
            <_i7.PractitionerEntity>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i7.PractitionerEntity>>.value(
                <_i7.PractitionerEntity>[]),
      ) as _i5.Future<List<_i7.PractitionerEntity>>);
}

/// A class which mocks [Algolia].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlgolia extends _i1.Mock implements _i3.Algolia {
  @override
  String get applicationId => (super.noSuchMethod(
        Invocation.getter(#applicationId),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#applicationId),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#applicationId),
        ),
      ) as String);

  @override
  Map<String, String> get extraHeaders => (super.noSuchMethod(
        Invocation.getter(#extraHeaders),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  List<String> get extraUserAgents => (super.noSuchMethod(
        Invocation.getter(#extraUserAgents),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  _i3.Algolia get instance => (super.noSuchMethod(
        Invocation.getter(#instance),
        returnValue: _FakeAlgolia_1(
          this,
          Invocation.getter(#instance),
        ),
        returnValueForMissingStub: _FakeAlgolia_1(
          this,
          Invocation.getter(#instance),
        ),
      ) as _i3.Algolia);

  @override
  _i3.AlgoliaMultiIndexesReference get multipleQueries => (super.noSuchMethod(
        Invocation.getter(#multipleQueries),
        returnValue: _FakeAlgoliaMultiIndexesReference_2(
          this,
          Invocation.getter(#multipleQueries),
        ),
        returnValueForMissingStub: _FakeAlgoliaMultiIndexesReference_2(
          this,
          Invocation.getter(#multipleQueries),
        ),
      ) as _i3.AlgoliaMultiIndexesReference);

  @override
  _i3.Algolia setHeader(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setHeader,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakeAlgolia_1(
          this,
          Invocation.method(
            #setHeader,
            [
              key,
              value,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeAlgolia_1(
          this,
          Invocation.method(
            #setHeader,
            [
              key,
              value,
            ],
          ),
        ),
      ) as _i3.Algolia);

  @override
  _i3.AlgoliaIndexReference index(String? index) => (super.noSuchMethod(
        Invocation.method(
          #index,
          [index],
        ),
        returnValue: _FakeAlgoliaIndexReference_3(
          this,
          Invocation.method(
            #index,
            [index],
          ),
        ),
        returnValueForMissingStub: _FakeAlgoliaIndexReference_3(
          this,
          Invocation.method(
            #index,
            [index],
          ),
        ),
      ) as _i3.AlgoliaIndexReference);

  @override
  _i5.Future<_i3.AlgoliaIndexesSnapshot> getIndices() => (super.noSuchMethod(
        Invocation.method(
          #getIndices,
          [],
        ),
        returnValue: _i5.Future<_i3.AlgoliaIndexesSnapshot>.value(
            _FakeAlgoliaIndexesSnapshot_4(
          this,
          Invocation.method(
            #getIndices,
            [],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.AlgoliaIndexesSnapshot>.value(
            _FakeAlgoliaIndexesSnapshot_4(
          this,
          Invocation.method(
            #getIndices,
            [],
          ),
        )),
      ) as _i5.Future<_i3.AlgoliaIndexesSnapshot>);

  @override
  _i5.Future<void> pushEvents(List<_i3.AlgoliaEvent>? events) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushEvents,
          [events],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [SavePractitionerUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSavePractitionerUseCase extends _i1.Mock
    implements _i9.SavePractitionerUseCase {
  @override
  _i4.PractitionerRepository get practitionerRepository => (super.noSuchMethod(
        Invocation.getter(#practitionerRepository),
        returnValue: _FakePractitionerRepository_5(
          this,
          Invocation.getter(#practitionerRepository),
        ),
        returnValueForMissingStub: _FakePractitionerRepository_5(
          this,
          Invocation.getter(#practitionerRepository),
        ),
      ) as _i4.PractitionerRepository);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>> execute(
          _i7.PractitionerEntity? practitioner) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [practitioner],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>>.value(
                _FakeEither_0<_i6.Failure, _i7.PractitionerEntity>(
          this,
          Invocation.method(
            #execute,
            [practitioner],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>>.value(
                _FakeEither_0<_i6.Failure, _i7.PractitionerEntity>(
          this,
          Invocation.method(
            #execute,
            [practitioner],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>>);
}

/// A class which mocks [GetPractitionerInfoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPractitionerInfoUseCase extends _i1.Mock
    implements _i10.GetPractitionerInfoUseCase {
  @override
  _i4.PractitionerRepository get practitionerRepository => (super.noSuchMethod(
        Invocation.getter(#practitionerRepository),
        returnValue: _FakePractitionerRepository_5(
          this,
          Invocation.getter(#practitionerRepository),
        ),
        returnValueForMissingStub: _FakePractitionerRepository_5(
          this,
          Invocation.getter(#practitionerRepository),
        ),
      ) as _i4.PractitionerRepository);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>> execute(
          String? practitionerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [practitionerId],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>>.value(
                _FakeEither_0<_i6.Failure, _i7.PractitionerEntity>(
          this,
          Invocation.method(
            #execute,
            [practitionerId],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>>.value(
                _FakeEither_0<_i6.Failure, _i7.PractitionerEntity>(
          this,
          Invocation.method(
            #execute,
            [practitionerId],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.PractitionerEntity>>);
}

/// A class which mocks [SearchPractitionerUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchPractitionerUseCase extends _i1.Mock
    implements _i11.SearchPractitionerUseCase {
  @override
  _i4.PractitionerRepository get practitionerRepository => (super.noSuchMethod(
        Invocation.getter(#practitionerRepository),
        returnValue: _FakePractitionerRepository_5(
          this,
          Invocation.getter(#practitionerRepository),
        ),
        returnValueForMissingStub: _FakePractitionerRepository_5(
          this,
          Invocation.getter(#practitionerRepository),
        ),
      ) as _i4.PractitionerRepository);

  @override
  _i5.Future<List<_i7.PractitionerEntity>> execute(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [query],
        ),
        returnValue: _i5.Future<List<_i7.PractitionerEntity>>.value(
            <_i7.PractitionerEntity>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i7.PractitionerEntity>>.value(
                <_i7.PractitionerEntity>[]),
      ) as _i5.Future<List<_i7.PractitionerEntity>>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i12.NavigatorObserver {
  @override
  void didPush(
    _i12.Route<dynamic>? route,
    _i12.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didPop(
    _i12.Route<dynamic>? route,
    _i12.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didRemove(
    _i12.Route<dynamic>? route,
    _i12.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didReplace({
    _i12.Route<dynamic>? newRoute,
    _i12.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didStartUserGesture(
    _i12.Route<dynamic>? route,
    _i12.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
