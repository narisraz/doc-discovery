// Mocks generated by Mockito 5.4.4 from annotations
// in docdiscovery/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:docdiscovery/core/error/failure.dart' as _i5;
import 'package:docdiscovery/domain/entities/practitioner.dart' as _i6;
import 'package:docdiscovery/domain/repositories/practitioner_repository.dart'
    as _i3;
import 'package:docdiscovery/domain/usecases/save_practitioner_use_case.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePractitionerRepository_1 extends _i1.SmartFake
    implements _i3.PractitionerRepository {
  _FakePractitionerRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PractitionerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPractitionerRepository extends _i1.Mock
    implements _i3.PractitionerRepository {
  MockPractitionerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.PractitionerEntity>> savePractitioner(
          _i6.PractitionerEntity? practitioner) =>
      (super.noSuchMethod(
        Invocation.method(
          #savePractitioner,
          [practitioner],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.PractitionerEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.PractitionerEntity>(
          this,
          Invocation.method(
            #savePractitioner,
            [practitioner],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.PractitionerEntity>>);
}

/// A class which mocks [SavePractitionerUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSavePractitionerUseCase extends _i1.Mock
    implements _i7.SavePractitionerUseCase {
  MockSavePractitionerUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.PractitionerRepository get practitionerRepository => (super.noSuchMethod(
        Invocation.getter(#practitionerRepository),
        returnValue: _FakePractitionerRepository_1(
          this,
          Invocation.getter(#practitionerRepository),
        ),
      ) as _i3.PractitionerRepository);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.PractitionerEntity>> execute(
          _i6.PractitionerEntity? practitioner) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [practitioner],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.PractitionerEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.PractitionerEntity>(
          this,
          Invocation.method(
            #execute,
            [practitioner],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.PractitionerEntity>>);
}
